name: Check for changes since last success
description: Check if there are changes since the last successful commit in specified paths.

inputs:
  paths:
    description: 'Paths to check for changes. .github is always included.'
    default: '.'
  github-token:
    description: 'GitHub token to use for authentication.'
    default: '${{ github.token }}'
  no-dot-github:
    description: 'If true, do not include .github in the paths to check.'
    default: 'false'
outputs:
  success-commit:
    description: 'The commit SHA of the last successful run.'
    value: ${{ steps.changes.outputs.success_commit }}
  has-changes:
    description: 'Whether there are changes since the last successful run.'
    value: ${{ steps.changes.outputs.has_changes }}

runs:
  using: 'composite'
  steps:
    # Create tmp directory
    - id: temp_dir
      shell: bash
      run: |
        # generate a temporary directory name
        temp_dir=".last_success_check_$(date +%s%N)"
        echo "Creating temporary directory: $temp_dir"
        mkdir -p "$temp_dir"
        echo "temp_dir=$temp_dir" >> "$GITHUB_OUTPUT"

    # Determine what we need to check out
    # It could be the push event or a pull request
    # If it's a pull request, we need to check out the source (head) branch
    # If it's a push event, we need to check out the target (base) branch
    - id: checkout
      shell: bash
      run: |
        # Check if the event is a pull request
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Event is a pull request"
          # Get the base branch name from the pull request event
          repo_name="${{ github.event.pull_request.head.repo.full_name }}"
          branch_name="${{ github.event.pull_request.head.ref }}"
        elif [ "${{ github.event_name }}" == "push" ]; then
          echo "Event is a push"
          # For push events, use the current branch
          repo_name="${{ github.repository }}"
          branch_name="${{ github.ref_name }}"
        else
          echo "Unsupported event type: ${{ github.event_name }}"
          exit 1
        fi
        echo "Determined source repo: $repo_name"
        echo "Determined source branch: $branch_name"
        echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"
        echo "repo_name=$repo_name" >> "$GITHUB_OUTPUT"

    # Check out the repository
    # Combine the repository name and branch name from the previous step
    - uses: actions/checkout@v4
      with:
        repository: ${{ steps.checkout.outputs.repo_name }}
        ref: ${{ steps.checkout.outputs.branch_name }}
        fetch-depth: 0
        path: ${{ steps.temp_dir.outputs.temp_dir }}
        token: ${{ inputs.github-token }}

    - id: commits
      shell: bash
      run: |
        # Get the list of commit SHAs for the current branch
        COMMITS=$(git rev-list ${{ steps.checkout.outputs.branch_name }})
        echo "Commits in the current branch: $COMMITS"
        COMMITS_JSON=$(echo "$COMMITS" | jq -R -s -c 'split("\n")[:-1]')
        echo "Commits JSON: $COMMITS_JSON"
        echo "commits_json=$COMMITS_JSON" >> "$GITHUB_OUTPUT"

    # Determine last successful run for the current workflow
    - id: last_success
      shell: bash
      run: |
        # Get the list of commit SHAs for the current branch
        COMMITS=$(git rev-list ${{ steps.checkout.outputs.branch_name }})
        echo "Commits in the current branch: $COMMITS"
        COMMITS_JSON=$(echo "$COMMITS" | jq -R -s -c 'split("\n")[:-1]')
        echo "Commits JSON: $COMMITS_JSON"
        export COMMITS_JSON
        gh run list \
          --workflow ${{ github.workflow }} \
          --event ${{ github.event_name }} \
          --branch ${{ steps.checkout.outputs.branch_name }} \
          --json databaseId,headBranch,status,conclusion,headSha \
          -q '.[] | select(.databaseId != null) | select(.headSha | IN (${{ steps.commits.commits_json }})) | .headSha' \
          > "$GITHUB_OUTPUT"
        # gh run list --workflow ${{ github.workflow }} --event ${{ github.event_name }} --branch ${{ steps.checkout.outputs.branch_name }} --status success --limit 1 --json databaseId,headBranch,status,conclusion,headSha -q '.[] | select(.databaseId != null) | select(.headSha | IN ($COMMITS_JSON)) | .headSha' > "$GITHUB_OUTPUT"
        exit 1
      working-directory: ${{ steps.temp_dir.outputs.temp_dir }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GH_TOKEN: ${{ inputs.github-token }}

    # - uses: actions/checkout@v2
    #   with:
    #     path: ${{ steps.temp_dir.outputs.temp_dir }}
    #     ref: ${{ github.ref }}
    #     fetch-depth: 0

    # # Get the last successful run for the current workflow on the current branch
    # - id: changes
    #   shell: bash
    #   working-directory: ${{ steps.temp_dir.outputs.temp_dir }}
    #   run: |
    #     # get branch name we are on
    #     branch_name=$(git rev-parse --abbrev-ref HEAD)
    #     # Get the last successful run for the current workflow
    #     success_commit=$(gh run list --workflow ${{ github.workflow }} --branch "$branch_name" --status success --limit 1 --json databaseId,status,conclusion,headSha -q '.[] | select(.databaseId != null) | .headSha')
    #     echo "success_commit: $success_commit"
    #     echo "success_commit=$success_commit" >> "$GITHUB_OUTPUT"
    #     if [ -z "$success_commit" ]; then
    #       echo "No successful commit found."
    #       echo "has_changes=true" >> "$GITHUB_OUTPUT"
    #       exit 0
    #     fi
    #     if [ -z "${{ inputs.override-paths }}" ]; then
    #       check_paths=".github ${{ inputs.paths }}"
    #     else
    #       check_paths="${{ inputs.override-paths }}"
    #     fi
    #     git diff $success_commit $check_paths
    #     has_changes=$(git diff --quiet $success_commit $check_paths || echo true)
    #     if [ "$has_changes" = "true" ]; then
    #       echo "Changes detected since last successful run in: $check_paths"
    #       echo "has_changes=true" >> "$GITHUB_OUTPUT"
    #     else
    #       echo "No changes since last successful run in: $check_paths"
    #       echo "has_changes=false" >> "$GITHUB_OUTPUT"
    #     fi

    #   env:
    #     GITHUB_TOKEN: ${{ inputs.github-token }}
    #     GH_TOKEN: ${{ inputs.github-token }}
