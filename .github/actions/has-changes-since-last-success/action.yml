name: Check for changes since last success
description: Check if there are changes since the last successful commit in specified paths.

inputs:
  paths:
    description: 'Paths to check for changes. .github is always included.'
    default: '.'
  github-token:
    description: 'GitHub token to use for authentication.'
    default: '${{ github.token }}'
  no-dot-github:
    description: 'If true, do not include .github in the paths to check.'
    default: 'false'
  fetch-depth:
    description: 'Fetch depth for git checkout.'
    default: '20'
outputs:
  success-commit:
    description: 'The commit SHA of the last successful run.'
    value: ${{ steps.last_success.outputs.commit_sha }}
  has-changes:
    description: 'Whether there are changes since the last successful run.'
    value: ${{ steps.changes.outputs.has_changes }}

runs:
  using: 'composite'
  steps:
    # Create tmp directory
    - id: temp_dir
      shell: bash
      run: |
        # generate a temporary directory name
        temp_dir=".last_success_check_$(date +%s%N)"
        echo "Creating temporary directory: $temp_dir"
        mkdir -p "$temp_dir"
        echo "temp_dir=$temp_dir" >> "$GITHUB_OUTPUT"

    # Determine what we need to check out
    # It could be the push event or a pull request
    # If it's a pull request, we need to check out the source (head) branch
    # If it's a push event, we need to check out the target (base) branch
    - id: config
      shell: bash
      run: |
        # Check if the event is a pull request
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Event is a pull request"
          source_branch_name="${{ github.event.pull_request.head.ref }}"
        elif [ "${{ github.event_name }}" == "push" ]; then
          echo "Event is a push"
          source_branch_name="${{ github.ref_name }}"
        else
          echo "Unsupported event type: ${{ github.event_name }}"
          exit 1
        fi
        echo "Source branch name: $source_branch_name"
        echo "source_branch_name=$source_branch_name" >> "$GITHUB_OUTPUT"
      working-directory: ${{ steps.temp_dir.outputs.temp_dir }}

    # Check out the repository
    # Combine the repository name and branch name from the previous step
    - uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        path: ${{ steps.temp_dir.outputs.temp_dir }}
        token: ${{ inputs.github-token }}

    - id: commits
      shell: bash
      run: |
        # Get branch name
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        # Get the list of commit SHAs for the current branch
        COMMITS=$(git rev-list $branch_name)
        echo "Number of commits in the current branch: $(echo "$COMMITS" | wc -l)"
        COMMITS_JSON=$(echo "$COMMITS" | jq -R -s -c 'split("\n")[:-1]')
        echo "commits_json=$COMMITS_JSON" >> "$GITHUB_OUTPUT"
      working-directory: ${{ steps.temp_dir.outputs.temp_dir }}

    # Determine last successful run for the current workflow
    - id: last_success
      shell: bash
      run: |
        # Get the last successful run for the current workflow with the list of commits
        gh run list \
          --workflow ${{ github.workflow }} \
          --event ${{ github.event_name }} \
          --branch ${{ steps.config.outputs.source_branch_name }} \
          --status success \
          --limit 1 \
          --json databaseId,headBranch,status,conclusion,headSha \
          -q '.[] | select(.databaseId != null) | select(.headSha | IN (${{ steps.commits.outputs.commits_json }}[])) | .headSha'
        commit_sha=$(gh run list \
          --workflow ${{ github.workflow }} \
          --event ${{ github.event_name }} \
          --branch ${{ steps.config.outputs.source_branch_name }} \
          --status success \
          --limit 1 \
          --json databaseId,headBranch,status,conclusion,headSha \
          -q '.[] | select(.databaseId != null) | select(.headSha | IN (${{ steps.commits.outputs.commits_json }}[])) | .headSha')
        if [ -z "$commit_sha" ]; then
          echo "No successful commit found."
        else
          echo "Found successful commit: $commit_sha"
        fi
        echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"
      working-directory: ${{ steps.temp_dir.outputs.temp_dir }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GH_TOKEN: ${{ inputs.github-token }}

    # Check for changes since the last successful run
    - id: changes
      shell: bash
      run: |
        # Check if the last successful commit is empty
        if [ -z "${{ steps.last_success.outputs.commit_sha }}" ]; then
          echo "No last successful commit found. Assuming changes."
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # Check for changes in the specified paths since the last successful commit
        # Make single line of paths
        check_paths=$(echo "${{ inputs.paths }}" | tr '\n' ' ')
        if [ "${{ inputs.no-dot-github }}" != "true" ]; then
          # Add .github to the paths
          check_paths=$(echo "$check_paths .github")
        fi

        has_changes=$(git diff --quiet ${{ steps.last_success.outputs.commit_sha }} $check_paths || echo true)
        if [ "$has_changes" = "true" ]; then
          echo "Changes detected since last successful run in: $check_paths"
          echo "has_changes=true" >> "$GITHUB_OUTPUT"
        else
          echo "No changes since last successful run in: $check_paths"
          echo "has_changes=false" >> "$GITHUB_OUTPUT"
        fi
      working-directory: ${{ steps.temp_dir.outputs.temp_dir }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GH_TOKEN: ${{ inputs.github-token }}
